
Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018aa  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e8  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  00002e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007cd  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cc  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000422d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	dd d0       	rcall	.+442    	; 0x2b0 <main>
  f6:	3c c1       	rjmp	.+632    	; 0x370 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN10CrownLightC1EP9LedDriverc>:

void CrownLight::countDown()
{
	if (_count > 0)
	{
		setCount(--_count);	
  fa:	fc 01       	movw	r30, r24
  fc:	71 83       	std	Z+1, r23	; 0x01
  fe:	60 83       	st	Z, r22
 100:	42 83       	std	Z+2, r20	; 0x02
 102:	13 82       	std	Z+3, r1	; 0x03
 104:	08 95       	ret

00000106 <_ZN10CrownLight8setCountEc>:
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	8c 01       	movw	r16, r24
 10e:	fc 01       	movw	r30, r24
 110:	63 83       	std	Z+3, r22	; 0x03
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	f8 01       	movw	r30, r16
 116:	82 81       	ldd	r24, Z+2	; 0x02
 118:	c8 17       	cp	r28, r24
 11a:	d0 f4       	brcc	.+52     	; 0x150 <_ZN10CrownLight8setCountEc+0x4a>
 11c:	83 81       	ldd	r24, Z+3	; 0x03
 11e:	c8 17       	cp	r28, r24
 120:	58 f4       	brcc	.+22     	; 0x138 <_ZN10CrownLight8setCountEc+0x32>
 122:	20 81       	ld	r18, Z
 124:	31 81       	ldd	r19, Z+1	; 0x01
 126:	8c 2f       	mov	r24, r28
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	71 d0       	rcall	.+226    	; 0x218 <_ZN9LedDriver2onEh>
 136:	0a c0       	rjmp	.+20     	; 0x14c <_ZN10CrownLight8setCountEc+0x46>
 138:	f8 01       	movw	r30, r16
 13a:	20 81       	ld	r18, Z
 13c:	31 81       	ldd	r19, Z+1	; 0x01
 13e:	8c 2f       	mov	r24, r28
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	3f d0       	rcall	.+126    	; 0x1ca <_ZN9LedDriver3offEv>
 14c:	cf 5f       	subi	r28, 0xFF	; 255
 14e:	e2 cf       	rjmp	.-60     	; 0x114 <_ZN10CrownLight8setCountEc+0xe>
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <_ZN10CrownLight7countUpEv>:
	}
}

void CrownLight::countUp()
{
	if (_count < _ledAmount)
 158:	fc 01       	movw	r30, r24
 15a:	63 81       	ldd	r22, Z+3	; 0x03
 15c:	22 81       	ldd	r18, Z+2	; 0x02
 15e:	62 17       	cp	r22, r18
 160:	18 f4       	brcc	.+6      	; 0x168 <_ZN10CrownLight7countUpEv+0x10>
	{
		setCount(++_count);
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	63 83       	std	Z+3, r22	; 0x03
 166:	cf cf       	rjmp	.-98     	; 0x106 <_ZN10CrownLight8setCountEc>
 168:	08 95       	ret

0000016a <_ZN9LedDriverC1Ehh>:
#include "Headers/LedDriver.h"

LedDriver::LedDriver(unsigned char port, unsigned char bit)
 16a:	fc 01       	movw	r30, r24
: _port(port), _bit(bit)
 16c:	60 83       	st	Z, r22
 16e:	41 83       	std	Z+1, r20	; 0x01
{	
	switch(_port)
 170:	62 34       	cpi	r22, 0x42	; 66
 172:	61 f0       	breq	.+24     	; 0x18c <_ZN9LedDriverC1Ehh+0x22>
 174:	18 f4       	brcc	.+6      	; 0x17c <_ZN9LedDriverC1Ehh+0x12>
 176:	61 34       	cpi	r22, 0x41	; 65
 178:	31 f0       	breq	.+12     	; 0x186 <_ZN9LedDriverC1Ehh+0x1c>
 17a:	08 95       	ret
 17c:	63 34       	cpi	r22, 0x43	; 67
 17e:	f1 f0       	breq	.+60     	; 0x1bc <_ZN9LedDriverC1Ehh+0x52>
 180:	68 34       	cpi	r22, 0x48	; 72
 182:	f9 f0       	breq	.+62     	; 0x1c2 <_ZN9LedDriverC1Ehh+0x58>
 184:	08 95       	ret
	{
		case 'A':
			DDRA = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	81 b9       	out	0x01, r24	; 1
			break;
 18a:	08 95       	ret
		
		case 'B':
			DDRB = 0xFF;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	84 b9       	out	0x04, r24	; 4
			
			if (_bit == 7)
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	87 30       	cpi	r24, 0x07	; 7
 194:	31 f4       	brne	.+12     	; 0x1a2 <_ZN9LedDriverC1Ehh+0x38>
			{
				// TIMER 0 (pin 13 (PB7)) -----
				
				TCCR0A = 0b10000011;
 196:	83 e8       	ldi	r24, 0x83	; 131
 198:	84 bd       	out	0x24, r24	; 36
				TCCR0B = 0b00000001;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	85 bd       	out	0x25, r24	; 37
				OCR0A = 0;
 19e:	17 bc       	out	0x27, r1	; 39
 1a0:	08 95       	ret
				
				// ----------------------
			}
			else if (_bit == 5)
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	89 f4       	brne	.+34     	; 0x1c8 <_ZN9LedDriverC1Ehh+0x5e>
			{
				// TIMER 1 (pin 11 (PB5)) -----
				
				TCCR1A = 0b10000011;
 1a6:	83 e8       	ldi	r24, 0x83	; 131
 1a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				TCCR1B = 0b00000001;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
				OCR1A = 0;
 1b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1b6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1ba:	08 95       	ret
				// ----------------------
			}
			break;
			
		case 'C':
			DDRC = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	87 b9       	out	0x07, r24	; 7
			break;
 1c0:	08 95       	ret
		
		case 'H':
			DDRH = 0xFF;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 1c8:	08 95       	ret

000001ca <_ZN9LedDriver3offEv>:
	}
}

void LedDriver::off()
{
	unsigned char pattern = 0b11111110 << _bit;
 1ca:	2e ef       	ldi	r18, 0xFE	; 254
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	01 80       	ldd	r0, Z+1	; 0x01
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <_ZN9LedDriver3offEv+0xe>
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <_ZN9LedDriver3offEv+0xa>
	
	switch(_port)
 1dc:	80 81       	ld	r24, Z
 1de:	82 34       	cpi	r24, 0x42	; 66
 1e0:	69 f0       	breq	.+26     	; 0x1fc <_ZN9LedDriver3offEv+0x32>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <_ZN9LedDriver3offEv+0x20>
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <_ZN9LedDriver3offEv+0x2a>
 1e8:	08 95       	ret
 1ea:	83 34       	cpi	r24, 0x43	; 67
 1ec:	59 f0       	breq	.+22     	; 0x204 <_ZN9LedDriver3offEv+0x3a>
 1ee:	88 34       	cpi	r24, 0x48	; 72
 1f0:	69 f0       	breq	.+26     	; 0x20c <_ZN9LedDriver3offEv+0x42>
 1f2:	08 95       	ret
	{
		case 'A':
			PORTA &= pattern;
 1f4:	82 b1       	in	r24, 0x02	; 2
 1f6:	28 23       	and	r18, r24
 1f8:	22 b9       	out	0x02, r18	; 2
			break;
 1fa:	08 95       	ret
		
		case 'B':
			PORTB &= pattern;
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	28 23       	and	r18, r24
 200:	25 b9       	out	0x05, r18	; 5
			
			break;
 202:	08 95       	ret
			
		case 'C':
			PORTC &= pattern;
 204:	88 b1       	in	r24, 0x08	; 8
 206:	28 23       	and	r18, r24
 208:	28 b9       	out	0x08, r18	; 8
			break;
 20a:	08 95       	ret
		
		case 'H':
			PORTH &= pattern;
 20c:	e2 e0       	ldi	r30, 0x02	; 2
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	80 81       	ld	r24, Z
 212:	28 23       	and	r18, r24
 214:	20 83       	st	Z, r18
 216:	08 95       	ret

00000218 <_ZN9LedDriver2onEh>:
			break;
	}
}

void LedDriver::on(unsigned char intensity)
{
 218:	fc 01       	movw	r30, r24
	unsigned char pattern = 0b00000001 << _bit;
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	01 80       	ldd	r0, Z+1	; 0x01
 220:	02 c0       	rjmp	.+4      	; 0x226 <_ZN9LedDriver2onEh+0xe>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <_ZN9LedDriver2onEh+0xa>
	
	switch(_port)
 22a:	90 81       	ld	r25, Z
 22c:	92 34       	cpi	r25, 0x42	; 66
 22e:	69 f0       	breq	.+26     	; 0x24a <_ZN9LedDriver2onEh+0x32>
 230:	18 f4       	brcc	.+6      	; 0x238 <_ZN9LedDriver2onEh+0x20>
 232:	91 34       	cpi	r25, 0x41	; 65
 234:	31 f0       	breq	.+12     	; 0x242 <_ZN9LedDriver2onEh+0x2a>
 236:	08 95       	ret
 238:	93 34       	cpi	r25, 0x43	; 67
 23a:	f1 f0       	breq	.+60     	; 0x278 <_ZN9LedDriver2onEh+0x60>
 23c:	98 34       	cpi	r25, 0x48	; 72
 23e:	01 f1       	breq	.+64     	; 0x280 <_ZN9LedDriver2onEh+0x68>
 240:	08 95       	ret
	{
		case 'A':
			PORTA |= pattern;
 242:	82 b1       	in	r24, 0x02	; 2
 244:	28 2b       	or	r18, r24
 246:	22 b9       	out	0x02, r18	; 2
			break;
 248:	08 95       	ret
		
		case 'B':
			PORTB |= pattern;
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	28 2b       	or	r18, r24
 24e:	25 b9       	out	0x05, r18	; 5
			
			if (_bit == 7)
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	87 30       	cpi	r24, 0x07	; 7
 254:	11 f4       	brne	.+4      	; 0x25a <_ZN9LedDriver2onEh+0x42>
			{
				OCR0A = intensity;
 256:	67 bd       	out	0x27, r22	; 39
 258:	08 95       	ret
			}
			else if (_bit == 5)
 25a:	85 30       	cpi	r24, 0x05	; 5
 25c:	b1 f4       	brne	.+44     	; 0x28a <_ZN9LedDriver2onEh+0x72>
			{
				OCR1A = intensity / 255 * 65535;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	6f 3f       	cpi	r22, 0xFF	; 255
 262:	08 f4       	brcc	.+2      	; 0x266 <_ZN9LedDriver2onEh+0x4e>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	91 95       	neg	r25
 26a:	81 95       	neg	r24
 26c:	91 09       	sbc	r25, r1
 26e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 272:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 276:	08 95       	ret
			}
			break;
			
		case 'C':
			PORTC |= pattern;
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	28 2b       	or	r18, r24
 27c:	28 b9       	out	0x08, r18	; 8
			break;
 27e:	08 95       	ret
		
		case 'H':
			PORTH |= pattern;
 280:	e2 e0       	ldi	r30, 0x02	; 2
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	80 81       	ld	r24, Z
 286:	28 2b       	or	r18, r24
 288:	20 83       	st	Z, r18
 28a:	08 95       	ret

0000028c <_ZN10DriveLightC1E9LedDriverS0_>:

void DriveLight::off()
{
	_frontLedDriver.off();
	_backLedDriver.off();
}
 28c:	fc 01       	movw	r30, r24
 28e:	71 83       	std	Z+1, r23	; 0x01
 290:	60 83       	st	Z, r22
 292:	53 83       	std	Z+3, r21	; 0x03
 294:	42 83       	std	Z+2, r20	; 0x02
 296:	08 95       	ret

00000298 <_ZN10DriveLight5driveEv>:

void DriveLight::drive()
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
	_frontLedDriver.on(255);
 29e:	6f ef       	ldi	r22, 0xFF	; 255
 2a0:	bb df       	rcall	.-138    	; 0x218 <_ZN9LedDriver2onEh>
	_backLedDriver.on(52);
 2a2:	64 e3       	ldi	r22, 0x34	; 52
 2a4:	ce 01       	movw	r24, r28
 2a6:	02 96       	adiw	r24, 0x02	; 2
 2a8:	b7 df       	rcall	.-146    	; 0x218 <_ZN9LedDriver2onEh>
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <main>:
#include "Headers/LedDriver.h"
#include "Headers/DriveLight.h"
#include "Headers/CrownLight.h"

int main(void)
{	
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	a2 97       	sbiw	r28, 0x22	; 34
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
		LedDriver('C', 0),	
		LedDriver('C', 2),	
		LedDriver('C', 4),	
		LedDriver('C', 6),	
		LedDriver('A', 7)
	};
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	63 e4       	ldi	r22, 0x43	; 67
 2c8:	ce 01       	movw	r24, r28
 2ca:	05 96       	adiw	r24, 0x05	; 5
 2cc:	4e df       	rcall	.-356    	; 0x16a <_ZN9LedDriverC1Ehh>
 2ce:	43 e0       	ldi	r20, 0x03	; 3
 2d0:	63 e4       	ldi	r22, 0x43	; 67
 2d2:	ce 01       	movw	r24, r28
 2d4:	07 96       	adiw	r24, 0x07	; 7
 2d6:	49 df       	rcall	.-366    	; 0x16a <_ZN9LedDriverC1Ehh>
 2d8:	45 e0       	ldi	r20, 0x05	; 5
 2da:	63 e4       	ldi	r22, 0x43	; 67
 2dc:	ce 01       	movw	r24, r28
 2de:	09 96       	adiw	r24, 0x09	; 9
 2e0:	44 df       	rcall	.-376    	; 0x16a <_ZN9LedDriverC1Ehh>
 2e2:	47 e0       	ldi	r20, 0x07	; 7
 2e4:	63 e4       	ldi	r22, 0x43	; 67
 2e6:	ce 01       	movw	r24, r28
 2e8:	0b 96       	adiw	r24, 0x0b	; 11
 2ea:	3f df       	rcall	.-386    	; 0x16a <_ZN9LedDriverC1Ehh>
 2ec:	46 e0       	ldi	r20, 0x06	; 6
 2ee:	61 e4       	ldi	r22, 0x41	; 65
 2f0:	ce 01       	movw	r24, r28
 2f2:	0d 96       	adiw	r24, 0x0d	; 13
 2f4:	3a df       	rcall	.-396    	; 0x16a <_ZN9LedDriverC1Ehh>
 2f6:	44 e0       	ldi	r20, 0x04	; 4
 2f8:	61 e4       	ldi	r22, 0x41	; 65
 2fa:	ce 01       	movw	r24, r28
 2fc:	0f 96       	adiw	r24, 0x0f	; 15
 2fe:	35 df       	rcall	.-406    	; 0x16a <_ZN9LedDriverC1Ehh>
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	63 e4       	ldi	r22, 0x43	; 67
 304:	ce 01       	movw	r24, r28
 306:	41 96       	adiw	r24, 0x11	; 17
 308:	30 df       	rcall	.-416    	; 0x16a <_ZN9LedDriverC1Ehh>
 30a:	42 e0       	ldi	r20, 0x02	; 2
 30c:	63 e4       	ldi	r22, 0x43	; 67
 30e:	ce 01       	movw	r24, r28
 310:	43 96       	adiw	r24, 0x13	; 19
 312:	2b df       	rcall	.-426    	; 0x16a <_ZN9LedDriverC1Ehh>
 314:	44 e0       	ldi	r20, 0x04	; 4
 316:	63 e4       	ldi	r22, 0x43	; 67
 318:	ce 01       	movw	r24, r28
 31a:	45 96       	adiw	r24, 0x15	; 21
 31c:	26 df       	rcall	.-436    	; 0x16a <_ZN9LedDriverC1Ehh>
 31e:	46 e0       	ldi	r20, 0x06	; 6
 320:	63 e4       	ldi	r22, 0x43	; 67
 322:	ce 01       	movw	r24, r28
 324:	47 96       	adiw	r24, 0x17	; 23
 326:	21 df       	rcall	.-446    	; 0x16a <_ZN9LedDriverC1Ehh>
 328:	47 e0       	ldi	r20, 0x07	; 7
 32a:	61 e4       	ldi	r22, 0x41	; 65
 32c:	ce 01       	movw	r24, r28
 32e:	49 96       	adiw	r24, 0x19	; 25
 330:	1c df       	rcall	.-456    	; 0x16a <_ZN9LedDriverC1Ehh>
	
	DriveLight driveLight = DriveLight(LedDriver('B', 5), LedDriver('B', 7));
 332:	47 e0       	ldi	r20, 0x07	; 7
 334:	62 e4       	ldi	r22, 0x42	; 66
 336:	ce 01       	movw	r24, r28
 338:	03 96       	adiw	r24, 0x03	; 3
 33a:	17 df       	rcall	.-466    	; 0x16a <_ZN9LedDriverC1Ehh>
 33c:	45 e0       	ldi	r20, 0x05	; 5
 33e:	62 e4       	ldi	r22, 0x42	; 66
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	12 df       	rcall	.-476    	; 0x16a <_ZN9LedDriverC1Ehh>
 346:	4b 81       	ldd	r20, Y+3	; 0x03
 348:	5c 81       	ldd	r21, Y+4	; 0x04
 34a:	69 81       	ldd	r22, Y+1	; 0x01
 34c:	7a 81       	ldd	r23, Y+2	; 0x02
 34e:	ce 01       	movw	r24, r28
 350:	4b 96       	adiw	r24, 0x1b	; 27
 352:	9c df       	rcall	.-200    	; 0x28c <_ZN10DriveLightC1E9LedDriverS0_>
	CrownLight crownLight = CrownLight(crownLedDrivers, crownLedAmount);
 354:	4b e0       	ldi	r20, 0x0B	; 11
 356:	be 01       	movw	r22, r28
 358:	6b 5f       	subi	r22, 0xFB	; 251
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	ce 01       	movw	r24, r28
 35e:	4f 96       	adiw	r24, 0x1f	; 31
 360:	cc de       	rcall	.-616    	; 0xfa <_ZN10CrownLightC1EP9LedDriverc>
 362:	ce 01       	movw	r24, r28
	
	while(1)
	{
		crownLight.countUp();
 364:	4f 96       	adiw	r24, 0x1f	; 31
 366:	f8 de       	rcall	.-528    	; 0x158 <_ZN10CrownLight7countUpEv>
 368:	ce 01       	movw	r24, r28
 36a:	4b 96       	adiw	r24, 0x1b	; 27
		driveLight.drive();
 36c:	95 df       	rcall	.-214    	; 0x298 <_ZN10DriveLight5driveEv>
 36e:	f9 cf       	rjmp	.-14     	; 0x362 <main+0xb2>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>


Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018a8  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010db  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000539  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00003320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007cd  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e6  00000000  00000000  00003c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00004027  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	92 d0       	rcall	.+292    	; 0x21a <main>
  f6:	f1 c0       	rjmp	.+482    	; 0x2da <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN10CrownLightC1EP9LedDriverc>:

void CrownLight::countDown()
{
	if (_count > 0)
	{
		setCount(--_count);	
  fa:	fc 01       	movw	r30, r24
  fc:	71 83       	std	Z+1, r23	; 0x01
  fe:	60 83       	st	Z, r22
 100:	42 83       	std	Z+2, r20	; 0x02
 102:	13 82       	std	Z+3, r1	; 0x03
 104:	08 95       	ret

00000106 <_ZN10CrownLight8setCountEc>:
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	8c 01       	movw	r16, r24
 10e:	fc 01       	movw	r30, r24
 110:	63 83       	std	Z+3, r22	; 0x03
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	f8 01       	movw	r30, r16
 116:	82 81       	ldd	r24, Z+2	; 0x02
 118:	c8 17       	cp	r28, r24
 11a:	d0 f4       	brcc	.+52     	; 0x150 <_ZN10CrownLight8setCountEc+0x4a>
 11c:	83 81       	ldd	r24, Z+3	; 0x03
 11e:	c8 17       	cp	r28, r24
 120:	58 f4       	brcc	.+22     	; 0x138 <_ZN10CrownLight8setCountEc+0x32>
 122:	20 81       	ld	r18, Z
 124:	31 81       	ldd	r19, Z+1	; 0x01
 126:	8c 2f       	mov	r24, r28
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	42 d0       	rcall	.+132    	; 0x1ba <_ZN9LedDriver2onEh>
 136:	0a c0       	rjmp	.+20     	; 0x14c <_ZN10CrownLight8setCountEc+0x46>
 138:	f8 01       	movw	r30, r16
 13a:	20 81       	ld	r18, Z
 13c:	31 81       	ldd	r19, Z+1	; 0x01
 13e:	8c 2f       	mov	r24, r28
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	1e d0       	rcall	.+60     	; 0x188 <_ZN9LedDriver3offEv>
 14c:	cf 5f       	subi	r28, 0xFF	; 255
 14e:	e2 cf       	rjmp	.-60     	; 0x114 <_ZN10CrownLight8setCountEc+0xe>
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <_ZN10CrownLight7countUpEv>:
	}
}

void CrownLight::countUp()
{
	if (_count < _ledAmount)
 158:	fc 01       	movw	r30, r24
 15a:	63 81       	ldd	r22, Z+3	; 0x03
 15c:	22 81       	ldd	r18, Z+2	; 0x02
 15e:	62 17       	cp	r22, r18
 160:	18 f4       	brcc	.+6      	; 0x168 <_ZN10CrownLight7countUpEv+0x10>
	{
		setCount(++_count);
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	63 83       	std	Z+3, r22	; 0x03
 166:	cf cf       	rjmp	.-98     	; 0x106 <_ZN10CrownLight8setCountEc>
 168:	08 95       	ret

0000016a <_ZN9LedDriverC1Ehh>:
#include "Headers/LedDriver.h"

LedDriver::LedDriver(unsigned char port, unsigned char bit)
: _port(port), _bit(bit)
 16a:	fc 01       	movw	r30, r24
 16c:	60 83       	st	Z, r22
 16e:	41 83       	std	Z+1, r20	; 0x01
{	
	switch(_port)
 170:	62 34       	cpi	r22, 0x42	; 66
 172:	19 f0       	breq	.+6      	; 0x17a <_ZN9LedDriverC1Ehh+0x10>
 174:	68 34       	cpi	r22, 0x48	; 72
 176:	21 f0       	breq	.+8      	; 0x180 <_ZN9LedDriverC1Ehh+0x16>
 178:	08 95       	ret
	{
		case 'B':
			DDRB = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	84 b9       	out	0x04, r24	; 4
			break;
 17e:	08 95       	ret
		
		case 'H':
			DDRH = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 186:	08 95       	ret

00000188 <_ZN9LedDriver3offEv>:
	}
}

void LedDriver::off()
{
	unsigned char pattern = 0b11111110 << _bit;
 188:	2e ef       	ldi	r18, 0xFE	; 254
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	01 80       	ldd	r0, Z+1	; 0x01
 190:	02 c0       	rjmp	.+4      	; 0x196 <_ZN9LedDriver3offEv+0xe>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <_ZN9LedDriver3offEv+0xa>
	
	switch(_port)
 19a:	80 81       	ld	r24, Z
 19c:	82 34       	cpi	r24, 0x42	; 66
 19e:	19 f0       	breq	.+6      	; 0x1a6 <_ZN9LedDriver3offEv+0x1e>
 1a0:	88 34       	cpi	r24, 0x48	; 72
 1a2:	29 f0       	breq	.+10     	; 0x1ae <_ZN9LedDriver3offEv+0x26>
 1a4:	08 95       	ret
	{
		case 'B':
			PORTB &= pattern;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	28 23       	and	r18, r24
 1aa:	25 b9       	out	0x05, r18	; 5
			break;
 1ac:	08 95       	ret
		
		case 'H':
			PORTH &= pattern;
 1ae:	e2 e0       	ldi	r30, 0x02	; 2
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	80 81       	ld	r24, Z
 1b4:	28 23       	and	r18, r24
 1b6:	20 83       	st	Z, r18
 1b8:	08 95       	ret

000001ba <_ZN9LedDriver2onEh>:
	}
}

void LedDriver::on(unsigned char intensity)
{
	unsigned char pattern = 0b00000001 << _bit;
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	01 80       	ldd	r0, Z+1	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <_ZN9LedDriver2onEh+0xe>
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <_ZN9LedDriver2onEh+0xa>
	
	switch(_port)
 1cc:	80 81       	ld	r24, Z
 1ce:	82 34       	cpi	r24, 0x42	; 66
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <_ZN9LedDriver2onEh+0x1e>
 1d2:	88 34       	cpi	r24, 0x48	; 72
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <_ZN9LedDriver2onEh+0x26>
 1d6:	08 95       	ret
	{
		case 'B':
			PORTB |= pattern;
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	28 2b       	or	r18, r24
 1dc:	25 b9       	out	0x05, r18	; 5
			break;
 1de:	08 95       	ret
		
		case 'H':
			PORTH |= pattern;
 1e0:	e2 e0       	ldi	r30, 0x02	; 2
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	80 81       	ld	r24, Z
 1e6:	28 2b       	or	r18, r24
 1e8:	20 83       	st	Z, r18
 1ea:	08 95       	ret

000001ec <_ZN10DriveLightC1E9LedDriverS0_>:

void DriveLight::off()
{
	_frontLedDriver.off();
	_backLedDriver.off();
}
 1ec:	fc 01       	movw	r30, r24
 1ee:	71 83       	std	Z+1, r23	; 0x01
 1f0:	60 83       	st	Z, r22
 1f2:	53 83       	std	Z+3, r21	; 0x03
 1f4:	42 83       	std	Z+2, r20	; 0x02
 1f6:	84 b5       	in	r24, 0x24	; 36
 1f8:	8c 7f       	andi	r24, 0xFC	; 252
 1fa:	84 bd       	out	0x24, r24	; 36
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	85 bd       	out	0x25, r24	; 37
 200:	08 95       	ret

00000202 <_ZN10DriveLight5driveEv>:

void DriveLight::drive()
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	_frontLedDriver.on(85);
 208:	65 e5       	ldi	r22, 0x55	; 85
 20a:	d7 df       	rcall	.-82     	; 0x1ba <_ZN9LedDriver2onEh>
	_backLedDriver.on(42);
 20c:	6a e2       	ldi	r22, 0x2A	; 42
 20e:	ce 01       	movw	r24, r28
 210:	02 96       	adiw	r24, 0x02	; 2
 212:	d3 df       	rcall	.-90     	; 0x1ba <_ZN9LedDriver2onEh>
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
#include "Headers/LedDriver.h"
#include "Headers/DriveLight.h"
#include "Headers/CrownLight.h"

int main(void)
{	
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	a2 97       	sbiw	r28, 0x22	; 34
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
		LedDriver('B', 1),	
		LedDriver('B', 1),	
		LedDriver('B', 1),	
		LedDriver('B', 1),	
		LedDriver('B', 1)
	};
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	62 e4       	ldi	r22, 0x42	; 66
 232:	ce 01       	movw	r24, r28
 234:	05 96       	adiw	r24, 0x05	; 5
 236:	99 df       	rcall	.-206    	; 0x16a <_ZN9LedDriverC1Ehh>
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	62 e4       	ldi	r22, 0x42	; 66
 23c:	ce 01       	movw	r24, r28
 23e:	07 96       	adiw	r24, 0x07	; 7
 240:	94 df       	rcall	.-216    	; 0x16a <_ZN9LedDriverC1Ehh>
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	62 e4       	ldi	r22, 0x42	; 66
 246:	ce 01       	movw	r24, r28
 248:	09 96       	adiw	r24, 0x09	; 9
 24a:	8f df       	rcall	.-226    	; 0x16a <_ZN9LedDriverC1Ehh>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	62 e4       	ldi	r22, 0x42	; 66
 250:	ce 01       	movw	r24, r28
 252:	0b 96       	adiw	r24, 0x0b	; 11
 254:	8a df       	rcall	.-236    	; 0x16a <_ZN9LedDriverC1Ehh>
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	62 e4       	ldi	r22, 0x42	; 66
 25a:	ce 01       	movw	r24, r28
 25c:	0d 96       	adiw	r24, 0x0d	; 13
 25e:	85 df       	rcall	.-246    	; 0x16a <_ZN9LedDriverC1Ehh>
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	62 e4       	ldi	r22, 0x42	; 66
 264:	ce 01       	movw	r24, r28
 266:	0f 96       	adiw	r24, 0x0f	; 15
 268:	80 df       	rcall	.-256    	; 0x16a <_ZN9LedDriverC1Ehh>
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	62 e4       	ldi	r22, 0x42	; 66
 26e:	ce 01       	movw	r24, r28
 270:	41 96       	adiw	r24, 0x11	; 17
 272:	7b df       	rcall	.-266    	; 0x16a <_ZN9LedDriverC1Ehh>
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	62 e4       	ldi	r22, 0x42	; 66
 278:	ce 01       	movw	r24, r28
 27a:	43 96       	adiw	r24, 0x13	; 19
 27c:	76 df       	rcall	.-276    	; 0x16a <_ZN9LedDriverC1Ehh>
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	62 e4       	ldi	r22, 0x42	; 66
 282:	ce 01       	movw	r24, r28
 284:	45 96       	adiw	r24, 0x15	; 21
 286:	71 df       	rcall	.-286    	; 0x16a <_ZN9LedDriverC1Ehh>
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	62 e4       	ldi	r22, 0x42	; 66
 28c:	ce 01       	movw	r24, r28
 28e:	47 96       	adiw	r24, 0x17	; 23
 290:	6c df       	rcall	.-296    	; 0x16a <_ZN9LedDriverC1Ehh>
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	62 e4       	ldi	r22, 0x42	; 66
 296:	ce 01       	movw	r24, r28
 298:	49 96       	adiw	r24, 0x19	; 25
 29a:	67 df       	rcall	.-306    	; 0x16a <_ZN9LedDriverC1Ehh>
	
	DriveLight driveLight = DriveLight(LedDriver('H', 6), LedDriver('H', 5));
 29c:	45 e0       	ldi	r20, 0x05	; 5
 29e:	68 e4       	ldi	r22, 0x48	; 72
 2a0:	ce 01       	movw	r24, r28
 2a2:	03 96       	adiw	r24, 0x03	; 3
 2a4:	62 df       	rcall	.-316    	; 0x16a <_ZN9LedDriverC1Ehh>
 2a6:	46 e0       	ldi	r20, 0x06	; 6
 2a8:	68 e4       	ldi	r22, 0x48	; 72
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	5d df       	rcall	.-326    	; 0x16a <_ZN9LedDriverC1Ehh>
 2b0:	4b 81       	ldd	r20, Y+3	; 0x03
 2b2:	5c 81       	ldd	r21, Y+4	; 0x04
 2b4:	69 81       	ldd	r22, Y+1	; 0x01
 2b6:	7a 81       	ldd	r23, Y+2	; 0x02
 2b8:	ce 01       	movw	r24, r28
 2ba:	4b 96       	adiw	r24, 0x1b	; 27
 2bc:	97 df       	rcall	.-210    	; 0x1ec <_ZN10DriveLightC1E9LedDriverS0_>
	CrownLight crownLight = CrownLight(crownLedDrivers, crownLedAmount);
 2be:	4b e0       	ldi	r20, 0x0B	; 11
 2c0:	be 01       	movw	r22, r28
 2c2:	6b 5f       	subi	r22, 0xFB	; 251
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	4f 96       	adiw	r24, 0x1f	; 31
 2ca:	17 df       	rcall	.-466    	; 0xfa <_ZN10CrownLightC1EP9LedDriverc>
 2cc:	ce 01       	movw	r24, r28
	
	driveLight.drive();
 2ce:	4b 96       	adiw	r24, 0x1b	; 27
 2d0:	98 df       	rcall	.-208    	; 0x202 <_ZN10DriveLight5driveEv>
 2d2:	ce 01       	movw	r24, r28
 2d4:	4f 96       	adiw	r24, 0x1f	; 31
	
	while(1)
	{
		crownLight.countUp();
 2d6:	40 df       	rcall	.-384    	; 0x158 <_ZN10CrownLight7countUpEv>
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <main+0xb8>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>

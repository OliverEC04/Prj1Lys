
Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  000008ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026ae  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169b  00000000  00000000  000031c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0c  00000000  00000000  0000485d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  0000536c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdf  00000000  00000000  00005864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d47  00000000  00000000  00006443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	77 c0       	rjmp	.+238    	; 0xf0 <__dtors_end>
   2:	00 00       	nop
   4:	0e c3       	rjmp	.+1564   	; 0x622 <__vector_1>
   6:	00 00       	nop
   8:	51 c3       	rjmp	.+1698   	; 0x6ac <__vector_2>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
   e:	00 00       	nop
  10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
  1e:	00 00       	nop
  20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
  22:	00 00       	nop
  24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
  26:	00 00       	nop
  28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	82 c0       	rjmp	.+260    	; 0x132 <__bad_interrupt>
  2e:	00 00       	nop
  30:	80 c0       	rjmp	.+256    	; 0x132 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
  36:	00 00       	nop
  38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
  42:	00 00       	nop
  44:	76 c0       	rjmp	.+236    	; 0x132 <__bad_interrupt>
  46:	00 00       	nop
  48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
  4e:	00 00       	nop
  50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
  52:	00 00       	nop
  54:	6e c0       	rjmp	.+220    	; 0x132 <__bad_interrupt>
  56:	00 00       	nop
  58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
  5e:	00 00       	nop
  60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
  62:	00 00       	nop
  64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
  66:	00 00       	nop
  68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
  6e:	00 00       	nop
  70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
  72:	00 00       	nop
  74:	5e c0       	rjmp	.+188    	; 0x132 <__bad_interrupt>
  76:	00 00       	nop
  78:	5c c0       	rjmp	.+184    	; 0x132 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5a c0       	rjmp	.+180    	; 0x132 <__bad_interrupt>
  7e:	00 00       	nop
  80:	58 c0       	rjmp	.+176    	; 0x132 <__bad_interrupt>
  82:	00 00       	nop
  84:	56 c0       	rjmp	.+172    	; 0x132 <__bad_interrupt>
  86:	00 00       	nop
  88:	54 c0       	rjmp	.+168    	; 0x132 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	85 c3       	rjmp	.+1802   	; 0x798 <__vector_35>
  8e:	00 00       	nop
  90:	50 c0       	rjmp	.+160    	; 0x132 <__bad_interrupt>
  92:	00 00       	nop
  94:	4e c0       	rjmp	.+156    	; 0x132 <__bad_interrupt>
  96:	00 00       	nop
  98:	4c c0       	rjmp	.+152    	; 0x132 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4a c0       	rjmp	.+148    	; 0x132 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	48 c0       	rjmp	.+144    	; 0x132 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	46 c0       	rjmp	.+140    	; 0x132 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	44 c0       	rjmp	.+136    	; 0x132 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	42 c0       	rjmp	.+132    	; 0x132 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	40 c0       	rjmp	.+128    	; 0x132 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3e c0       	rjmp	.+124    	; 0x132 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3c c0       	rjmp	.+120    	; 0x132 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3a c0       	rjmp	.+116    	; 0x132 <__bad_interrupt>
  be:	00 00       	nop
  c0:	38 c0       	rjmp	.+112    	; 0x132 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	36 c0       	rjmp	.+108    	; 0x132 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	cb c1       	rjmp	.+918    	; 0x460 <__vector_50>
  ca:	00 00       	nop
  cc:	32 c0       	rjmp	.+100    	; 0x132 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	30 c0       	rjmp	.+96     	; 0x132 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2e c0       	rjmp	.+92     	; 0x132 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2c c0       	rjmp	.+88     	; 0x132 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2a c0       	rjmp	.+84     	; 0x132 <__bad_interrupt>
  de:	00 00       	nop
  e0:	28 c0       	rjmp	.+80     	; 0x132 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	e3 02       	muls	r30, r19
  e6:	9b 03       	fmulsu	r17, r19
  e8:	fe 03       	fmulsu	r23, r22

000000ea <__ctors_end>:
  ea:	e9 02       	muls	r30, r25
  ec:	a1 03       	fmuls	r18, r17
  ee:	04 04       	cpc	r0, r4

000000f0 <__dtors_end>:
  f0:	11 24       	eor	r1, r1
  f2:	1f be       	out	0x3f, r1	; 63
  f4:	cf ef       	ldi	r28, 0xFF	; 255
  f6:	d1 e2       	ldi	r29, 0x21	; 33
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_clear_bss>:
 100:	22 e0       	ldi	r18, 0x02	; 2
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b2 e0       	ldi	r27, 0x02	; 2
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	aa 30       	cpi	r26, 0x0A	; 10
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>

00000110 <__do_global_ctors>:
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	c5 e7       	ldi	r28, 0x75	; 117
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <__do_global_ctors+0x14>
 11a:	21 97       	sbiw	r28, 0x01	; 1
 11c:	01 09       	sbc	r16, r1
 11e:	80 2f       	mov	r24, r16
 120:	fe 01       	movw	r30, r28
 122:	78 d3       	rcall	.+1776   	; 0x814 <__tablejump2__>
 124:	c2 37       	cpi	r28, 0x72	; 114
 126:	d1 07       	cpc	r29, r17
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 07       	cpc	r16, r24
 12c:	b1 f7       	brne	.-20     	; 0x11a <__do_global_ctors+0xa>
 12e:	dd d0       	rcall	.+442    	; 0x2ea <main>
 130:	79 c3       	rjmp	.+1778   	; 0x824 <__do_global_dtors>

00000132 <__bad_interrupt>:
 132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <_ZN10CrownLightC1EP9LedDriverc>:

void CrownLight::countDown()
{
	if (_count > 0)
	{
		setCount(--_count);	
 134:	fc 01       	movw	r30, r24
 136:	71 83       	std	Z+1, r23	; 0x01
 138:	60 83       	st	Z, r22
 13a:	42 83       	std	Z+2, r20	; 0x02
 13c:	13 82       	std	Z+3, r1	; 0x03
 13e:	08 95       	ret

00000140 <_ZN10CrownLight8setCountEc>:
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	8c 01       	movw	r16, r24
 148:	fc 01       	movw	r30, r24
 14a:	63 83       	std	Z+3, r22	; 0x03
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	f8 01       	movw	r30, r16
 150:	82 81       	ldd	r24, Z+2	; 0x02
 152:	c8 17       	cp	r28, r24
 154:	d0 f4       	brcc	.+52     	; 0x18a <_ZN10CrownLight8setCountEc+0x4a>
 156:	83 81       	ldd	r24, Z+3	; 0x03
 158:	c8 17       	cp	r28, r24
 15a:	58 f4       	brcc	.+22     	; 0x172 <_ZN10CrownLight8setCountEc+0x32>
 15c:	20 81       	ld	r18, Z
 15e:	31 81       	ldd	r19, Z+1	; 0x01
 160:	8c 2f       	mov	r24, r28
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6f ef       	ldi	r22, 0xFF	; 255
 16a:	82 0f       	add	r24, r18
 16c:	93 1f       	adc	r25, r19
 16e:	71 d0       	rcall	.+226    	; 0x252 <_ZN9LedDriver2onEh>
 170:	0a c0       	rjmp	.+20     	; 0x186 <_ZN10CrownLight8setCountEc+0x46>
 172:	f8 01       	movw	r30, r16
 174:	20 81       	ld	r18, Z
 176:	31 81       	ldd	r19, Z+1	; 0x01
 178:	8c 2f       	mov	r24, r28
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	3f d0       	rcall	.+126    	; 0x204 <_ZN9LedDriver3offEv>
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	e2 cf       	rjmp	.-60     	; 0x14e <_ZN10CrownLight8setCountEc+0xe>
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <_ZN10CrownLight7countUpEv>:
	}
}

void CrownLight::countUp()
{
	if (_count < _ledAmount)
 192:	fc 01       	movw	r30, r24
 194:	63 81       	ldd	r22, Z+3	; 0x03
 196:	22 81       	ldd	r18, Z+2	; 0x02
 198:	62 17       	cp	r22, r18
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <_ZN10CrownLight7countUpEv+0x10>
	{
		setCount(++_count);
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	63 83       	std	Z+3, r22	; 0x03
 1a0:	cf cf       	rjmp	.-98     	; 0x140 <_ZN10CrownLight8setCountEc>
 1a2:	08 95       	ret

000001a4 <_ZN9LedDriverC1Ehh>:
#include "Headers/LedDriver.h"

LedDriver::LedDriver(unsigned char port, unsigned char bit)
 1a4:	fc 01       	movw	r30, r24
: _port(port), _bit(bit)
 1a6:	60 83       	st	Z, r22
 1a8:	41 83       	std	Z+1, r20	; 0x01
{	
	switch(_port)
 1aa:	62 34       	cpi	r22, 0x42	; 66
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <_ZN9LedDriverC1Ehh+0x22>
 1ae:	18 f4       	brcc	.+6      	; 0x1b6 <_ZN9LedDriverC1Ehh+0x12>
 1b0:	61 34       	cpi	r22, 0x41	; 65
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <_ZN9LedDriverC1Ehh+0x1c>
 1b4:	08 95       	ret
 1b6:	63 34       	cpi	r22, 0x43	; 67
 1b8:	f1 f0       	breq	.+60     	; 0x1f6 <_ZN9LedDriverC1Ehh+0x52>
 1ba:	68 34       	cpi	r22, 0x48	; 72
 1bc:	f9 f0       	breq	.+62     	; 0x1fc <_ZN9LedDriverC1Ehh+0x58>
 1be:	08 95       	ret
	{
		case 'A':
			DDRA = 0xFF;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	81 b9       	out	0x01, r24	; 1
			break;
 1c4:	08 95       	ret
		
		case 'B':
			DDRB = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	84 b9       	out	0x04, r24	; 4
			
			if (_bit == 7)
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	87 30       	cpi	r24, 0x07	; 7
 1ce:	31 f4       	brne	.+12     	; 0x1dc <_ZN9LedDriverC1Ehh+0x38>
			{
				// TIMER 0 (pin 13 (PB7)) -----
				
				TCCR0A = 0b10000011;
 1d0:	83 e8       	ldi	r24, 0x83	; 131
 1d2:	84 bd       	out	0x24, r24	; 36
				TCCR0B = 0b00000001;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	85 bd       	out	0x25, r24	; 37
				OCR0A = 0;
 1d8:	17 bc       	out	0x27, r1	; 39
 1da:	08 95       	ret
				
				// ----------------------
			}
			else if (_bit == 5)
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	89 f4       	brne	.+34     	; 0x202 <_ZN9LedDriverC1Ehh+0x5e>
			{
				// TIMER 1 (pin 11 (PB5)) -----
				
				TCCR1A = 0b10000011;
 1e0:	83 e8       	ldi	r24, 0x83	; 131
 1e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				TCCR1B = 0b00000001;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
				OCR1A = 0;
 1ec:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1f0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1f4:	08 95       	ret
				// ----------------------
			}
			break;
			
		case 'C':
			DDRC = 0xFF;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	87 b9       	out	0x07, r24	; 7
			break;
 1fa:	08 95       	ret
		
		case 'H':
			DDRH = 0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 202:	08 95       	ret

00000204 <_ZN9LedDriver3offEv>:
	}
}

void LedDriver::off()
{
	unsigned char pattern = 0b11111110 << _bit;
 204:	2e ef       	ldi	r18, 0xFE	; 254
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	01 80       	ldd	r0, Z+1	; 0x01
 20c:	02 c0       	rjmp	.+4      	; 0x212 <_ZN9LedDriver3offEv+0xe>
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <_ZN9LedDriver3offEv+0xa>
	
	switch(_port)
 216:	80 81       	ld	r24, Z
 218:	82 34       	cpi	r24, 0x42	; 66
 21a:	69 f0       	breq	.+26     	; 0x236 <_ZN9LedDriver3offEv+0x32>
 21c:	18 f4       	brcc	.+6      	; 0x224 <_ZN9LedDriver3offEv+0x20>
 21e:	81 34       	cpi	r24, 0x41	; 65
 220:	31 f0       	breq	.+12     	; 0x22e <_ZN9LedDriver3offEv+0x2a>
 222:	08 95       	ret
 224:	83 34       	cpi	r24, 0x43	; 67
 226:	59 f0       	breq	.+22     	; 0x23e <_ZN9LedDriver3offEv+0x3a>
 228:	88 34       	cpi	r24, 0x48	; 72
 22a:	69 f0       	breq	.+26     	; 0x246 <_ZN9LedDriver3offEv+0x42>
 22c:	08 95       	ret
	{
		case 'A':
			PORTA &= pattern;
 22e:	82 b1       	in	r24, 0x02	; 2
 230:	28 23       	and	r18, r24
 232:	22 b9       	out	0x02, r18	; 2
			break;
 234:	08 95       	ret
		
		case 'B':
			PORTB &= pattern;
 236:	85 b1       	in	r24, 0x05	; 5
 238:	28 23       	and	r18, r24
 23a:	25 b9       	out	0x05, r18	; 5
			
			break;
 23c:	08 95       	ret
			
		case 'C':
			PORTC &= pattern;
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	28 23       	and	r18, r24
 242:	28 b9       	out	0x08, r18	; 8
			break;
 244:	08 95       	ret
		
		case 'H':
			PORTH &= pattern;
 246:	e2 e0       	ldi	r30, 0x02	; 2
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	28 23       	and	r18, r24
 24e:	20 83       	st	Z, r18
 250:	08 95       	ret

00000252 <_ZN9LedDriver2onEh>:
			break;
	}
}

void LedDriver::on(unsigned char intensity)
{
 252:	fc 01       	movw	r30, r24
	unsigned char pattern = 0b00000001 << _bit;
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	01 80       	ldd	r0, Z+1	; 0x01
 25a:	02 c0       	rjmp	.+4      	; 0x260 <_ZN9LedDriver2onEh+0xe>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <_ZN9LedDriver2onEh+0xa>
	
	switch(_port)
 264:	90 81       	ld	r25, Z
 266:	92 34       	cpi	r25, 0x42	; 66
 268:	69 f0       	breq	.+26     	; 0x284 <_ZN9LedDriver2onEh+0x32>
 26a:	18 f4       	brcc	.+6      	; 0x272 <_ZN9LedDriver2onEh+0x20>
 26c:	91 34       	cpi	r25, 0x41	; 65
 26e:	31 f0       	breq	.+12     	; 0x27c <_ZN9LedDriver2onEh+0x2a>
 270:	08 95       	ret
 272:	93 34       	cpi	r25, 0x43	; 67
 274:	f1 f0       	breq	.+60     	; 0x2b2 <_ZN9LedDriver2onEh+0x60>
 276:	98 34       	cpi	r25, 0x48	; 72
 278:	01 f1       	breq	.+64     	; 0x2ba <_ZN9LedDriver2onEh+0x68>
 27a:	08 95       	ret
	{
		case 'A':
			PORTA |= pattern;
 27c:	82 b1       	in	r24, 0x02	; 2
 27e:	28 2b       	or	r18, r24
 280:	22 b9       	out	0x02, r18	; 2
			break;
 282:	08 95       	ret
		
		case 'B':
			PORTB |= pattern;
 284:	85 b1       	in	r24, 0x05	; 5
 286:	28 2b       	or	r18, r24
 288:	25 b9       	out	0x05, r18	; 5
			
			if (_bit == 7)
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	87 30       	cpi	r24, 0x07	; 7
 28e:	11 f4       	brne	.+4      	; 0x294 <_ZN9LedDriver2onEh+0x42>
			{
				OCR0A = intensity;
 290:	67 bd       	out	0x27, r22	; 39
 292:	08 95       	ret
			}
			else if (_bit == 5)
 294:	85 30       	cpi	r24, 0x05	; 5
 296:	b1 f4       	brne	.+44     	; 0x2c4 <_ZN9LedDriver2onEh+0x72>
			{
				OCR1A = intensity / 255 * 65535;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	6f 3f       	cpi	r22, 0xFF	; 255
 29c:	08 f4       	brcc	.+2      	; 0x2a0 <_ZN9LedDriver2onEh+0x4e>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	91 95       	neg	r25
 2a4:	81 95       	neg	r24
 2a6:	91 09       	sbc	r25, r1
 2a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2b0:	08 95       	ret
			}
			break;
			
		case 'C':
			PORTC |= pattern;
 2b2:	88 b1       	in	r24, 0x08	; 8
 2b4:	28 2b       	or	r18, r24
 2b6:	28 b9       	out	0x08, r18	; 8
			break;
 2b8:	08 95       	ret
		
		case 'H':
			PORTH |= pattern;
 2ba:	e2 e0       	ldi	r30, 0x02	; 2
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	80 81       	ld	r24, Z
 2c0:	28 2b       	or	r18, r24
 2c2:	20 83       	st	Z, r18
 2c4:	08 95       	ret

000002c6 <_ZN10DriveLightC1E9LedDriverS0_>:

void DriveLight::off()
{
	_frontLedDriver.off();
	_backLedDriver.off();
}
 2c6:	fc 01       	movw	r30, r24
 2c8:	71 83       	std	Z+1, r23	; 0x01
 2ca:	60 83       	st	Z, r22
 2cc:	53 83       	std	Z+3, r21	; 0x03
 2ce:	42 83       	std	Z+2, r20	; 0x02
 2d0:	08 95       	ret

000002d2 <_ZN10DriveLight5driveEv>:

void DriveLight::drive()
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
	_frontLedDriver.on(255);
 2d8:	6f ef       	ldi	r22, 0xFF	; 255
 2da:	bb df       	rcall	.-138    	; 0x252 <_ZN9LedDriver2onEh>
	_backLedDriver.on(52);
 2dc:	64 e3       	ldi	r22, 0x34	; 52
 2de:	ce 01       	movw	r24, r28
 2e0:	02 96       	adiw	r24, 0x02	; 2
 2e2:	b7 df       	rcall	.-146    	; 0x252 <_ZN9LedDriver2onEh>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <main>:

#include "Headers/Position.h"
extern Position P;

int main(void)
{	
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	a2 97       	sbiw	r28, 0x22	; 34
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
		LedDriver('C', 0),	
		LedDriver('C', 2),	
		LedDriver('C', 4),	
		LedDriver('C', 6),	
		LedDriver('A', 7)
	};
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	63 e4       	ldi	r22, 0x43	; 67
 302:	ce 01       	movw	r24, r28
 304:	05 96       	adiw	r24, 0x05	; 5
 306:	4e df       	rcall	.-356    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 308:	43 e0       	ldi	r20, 0x03	; 3
 30a:	63 e4       	ldi	r22, 0x43	; 67
 30c:	ce 01       	movw	r24, r28
 30e:	07 96       	adiw	r24, 0x07	; 7
 310:	49 df       	rcall	.-366    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 312:	45 e0       	ldi	r20, 0x05	; 5
 314:	63 e4       	ldi	r22, 0x43	; 67
 316:	ce 01       	movw	r24, r28
 318:	09 96       	adiw	r24, 0x09	; 9
 31a:	44 df       	rcall	.-376    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 31c:	47 e0       	ldi	r20, 0x07	; 7
 31e:	63 e4       	ldi	r22, 0x43	; 67
 320:	ce 01       	movw	r24, r28
 322:	0b 96       	adiw	r24, 0x0b	; 11
 324:	3f df       	rcall	.-386    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 326:	46 e0       	ldi	r20, 0x06	; 6
 328:	61 e4       	ldi	r22, 0x41	; 65
 32a:	ce 01       	movw	r24, r28
 32c:	0d 96       	adiw	r24, 0x0d	; 13
 32e:	3a df       	rcall	.-396    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 330:	44 e0       	ldi	r20, 0x04	; 4
 332:	61 e4       	ldi	r22, 0x41	; 65
 334:	ce 01       	movw	r24, r28
 336:	0f 96       	adiw	r24, 0x0f	; 15
 338:	35 df       	rcall	.-406    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	63 e4       	ldi	r22, 0x43	; 67
 33e:	ce 01       	movw	r24, r28
 340:	41 96       	adiw	r24, 0x11	; 17
 342:	30 df       	rcall	.-416    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 344:	42 e0       	ldi	r20, 0x02	; 2
 346:	63 e4       	ldi	r22, 0x43	; 67
 348:	ce 01       	movw	r24, r28
 34a:	43 96       	adiw	r24, 0x13	; 19
 34c:	2b df       	rcall	.-426    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 34e:	44 e0       	ldi	r20, 0x04	; 4
 350:	63 e4       	ldi	r22, 0x43	; 67
 352:	ce 01       	movw	r24, r28
 354:	45 96       	adiw	r24, 0x15	; 21
 356:	26 df       	rcall	.-436    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 358:	46 e0       	ldi	r20, 0x06	; 6
 35a:	63 e4       	ldi	r22, 0x43	; 67
 35c:	ce 01       	movw	r24, r28
 35e:	47 96       	adiw	r24, 0x17	; 23
 360:	21 df       	rcall	.-446    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 362:	47 e0       	ldi	r20, 0x07	; 7
 364:	61 e4       	ldi	r22, 0x41	; 65
 366:	ce 01       	movw	r24, r28
 368:	49 96       	adiw	r24, 0x19	; 25
 36a:	1c df       	rcall	.-456    	; 0x1a4 <_ZN9LedDriverC1Ehh>
	
	DriveLight driveLight = DriveLight(LedDriver('B', 5), LedDriver('B', 7));
 36c:	47 e0       	ldi	r20, 0x07	; 7
 36e:	62 e4       	ldi	r22, 0x42	; 66
 370:	ce 01       	movw	r24, r28
 372:	03 96       	adiw	r24, 0x03	; 3
 374:	17 df       	rcall	.-466    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 376:	45 e0       	ldi	r20, 0x05	; 5
 378:	62 e4       	ldi	r22, 0x42	; 66
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	12 df       	rcall	.-476    	; 0x1a4 <_ZN9LedDriverC1Ehh>
 380:	4b 81       	ldd	r20, Y+3	; 0x03
 382:	5c 81       	ldd	r21, Y+4	; 0x04
 384:	69 81       	ldd	r22, Y+1	; 0x01
 386:	7a 81       	ldd	r23, Y+2	; 0x02
 388:	ce 01       	movw	r24, r28
 38a:	4b 96       	adiw	r24, 0x1b	; 27
 38c:	9c df       	rcall	.-200    	; 0x2c6 <_ZN10DriveLightC1E9LedDriverS0_>
	CrownLight crownLight = CrownLight(crownLedDrivers, crownLedAmount);
 38e:	4b e0       	ldi	r20, 0x0B	; 11
 390:	be 01       	movw	r22, r28
 392:	6b 5f       	subi	r22, 0xFB	; 251
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	ce 01       	movw	r24, r28
 398:	4f 96       	adiw	r24, 0x1f	; 31
 39a:	cc de       	rcall	.-616    	; 0x134 <_ZN10CrownLightC1EP9LedDriverc>
 39c:	ce 01       	movw	r24, r28
	
	while(1)
	{
		crownLight.countUp();
 39e:	4f 96       	adiw	r24, 0x1f	; 31
 3a0:	f8 de       	rcall	.-528    	; 0x192 <_ZN10CrownLight7countUpEv>
 3a2:	ce 01       	movw	r24, r28
 3a4:	4b 96       	adiw	r24, 0x1b	; 27
		driveLight.drive();
 3a6:	95 df       	rcall	.-214    	; 0x2d2 <_ZN10DriveLight5driveEv>
 3a8:	f9 cf       	rjmp	.-14     	; 0x39c <main+0xb2>

000003aa <_ZN5MotorC1Ev>:
 3aa:	fc 01       	movw	r30, r24
 3ac:	a1 e0       	ldi	r26, 0x01	; 1
 3ae:	b1 e0       	ldi	r27, 0x01	; 1
	{
		OCR5A = (31250*time-3*(abs(speed-speed_)))/(3*(abs(speed-speed_)));
	}
	
	speed_ = speed;
}
 3b0:	8c 91       	ld	r24, X
 3b2:	89 60       	ori	r24, 0x09	; 9
 3b4:	8c 93       	st	X, r24
 3b6:	82 ec       	ldi	r24, 0xC2	; 194
 3b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 3bc:	89 e1       	ldi	r24, 0x19	; 25
 3be:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	9c e7       	ldi	r25, 0x7C	; 124
 3c6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7c00a7>
 3ca:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7c00a6>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	3d e7       	ldi	r19, 0x7D	; 125
 3d2:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 3d6:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 3da:	a0 e0       	ldi	r26, 0x00	; 0
 3dc:	b1 e0       	ldi	r27, 0x01	; 1
 3de:	8c 91       	ld	r24, X
 3e0:	8e 7f       	andi	r24, 0xFE	; 254
 3e2:	8c 93       	st	X, r24
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 3ea:	93 e1       	ldi	r25, 0x13	; 19
 3ec:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
 3f0:	43 ed       	ldi	r20, 0xD3	; 211
 3f2:	50 e3       	ldi	r21, 0x30	; 48
 3f4:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
 3f8:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
 3fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 400:	78 94       	sei
 402:	31 83       	std	Z+1, r19	; 0x01
 404:	20 83       	st	Z, r18
 406:	12 82       	std	Z+2, r1	; 0x02
 408:	14 82       	std	Z+4, r1	; 0x04
 40a:	13 82       	std	Z+3, r1	; 0x03
 40c:	08 95       	ret

0000040e <_ZN5MotorD1Ev>:
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	9d e7       	ldi	r25, 0x7D	; 125
 412:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 416:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 41a:	08 95       	ret

0000041c <_Z41__static_initialization_and_destruction_0ii>:
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
 426:	8b 01       	movw	r16, r22
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	31 f4       	brne	.+12     	; 0x438 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 42c:	6f 3f       	cpi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	19 f4       	brne	.+6      	; 0x438 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	b9 df       	rcall	.-142    	; 0x3aa <_ZN5MotorC1Ev>
 438:	cd 2b       	or	r28, r29
 43a:	31 f4       	brne	.+12     	; 0x448 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 43c:	0f 3f       	cpi	r16, 0xFF	; 255
 43e:	1f 4f       	sbci	r17, 0xFF	; 255
 440:	19 f4       	brne	.+6      	; 0x448 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	e3 df       	rcall	.-58     	; 0x40e <_ZN5MotorD1Ev>
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <_ZNK5Motor12getTargetOCREv>:

unsigned int Motor::getTargetOCR() const
{
	return targetOCR_;
}
 452:	fc 01       	movw	r30, r24
 454:	80 81       	ld	r24, Z
 456:	91 81       	ldd	r25, Z+1	; 0x01
 458:	08 95       	ret

0000045a <_ZNK5Motor18getTargetDirectionEv>:

char Motor::getTargetDirection() const
{
	return targetDirection_;
 45a:	fc 01       	movw	r30, r24
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	08 95       	ret

00000460 <__vector_50>:
#include "Headers/Motor.h"

Motor M;
// if ((OCR4A != M.getTargetOCR()) || ((PORTH & (1<<0)) != M.getTargetDirection()))
ISR(TIMER5_OVF_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	0b b6       	in	r0, 0x3b	; 59
 46c:	0f 92       	push	r0
 46e:	cf 92       	push	r12
 470:	df 92       	push	r13
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	unsigned int targetOCR = M.getTargetOCR();
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	db df       	rcall	.-74     	; 0x452 <_ZNK5Motor12getTargetOCREv>
 49c:	ec 01       	movw	r28, r24
	int targetDirection = M.getTargetDirection();
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	92 e0       	ldi	r25, 0x02	; 2
 4a2:	db df       	rcall	.-74     	; 0x45a <_ZNK5Motor18getTargetDirectionEv>
 4a4:	90 e0       	ldi	r25, 0x00	; 0
	if ((OCR4A != targetOCR) || ((PORTH & (1<<0)) != targetDirection))
 4a6:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 4aa:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 4ae:	c2 17       	cp	r28, r18
 4b0:	d3 07       	cpc	r29, r19
 4b2:	59 f4       	brne	.+22     	; 0x4ca <__vector_50+0x6a>
 4b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 4b8:	20 fb       	bst	r18, 0
 4ba:	ee 24       	eor	r14, r14
 4bc:	e0 f8       	bld	r14, 0
 4be:	f1 2c       	mov	r15, r1
 4c0:	8e 15       	cp	r24, r14
 4c2:	9f 05       	cpc	r25, r15
 4c4:	21 f0       	breq	.+8      	; 0x4ce <__vector_50+0x6e>
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__vector_50+0x70>
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <__vector_50+0x70>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	22 23       	and	r18, r18
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__vector_50+0x76>
 4d4:	5d c0       	rjmp	.+186    	; 0x590 <__vector_50+0x130>
	{
		if ((OCR4A >= 24000) && ((PORTH & (1<<0)) != targetDirection))
 4d6:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 4da:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 4de:	40 3c       	cpi	r20, 0xC0	; 192
 4e0:	5d 45       	sbci	r21, 0x5D	; 93
 4e2:	50 f0       	brcs	.+20     	; 0x4f8 <__vector_50+0x98>
 4e4:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 4e8:	03 2f       	mov	r16, r19
 4ea:	01 70       	andi	r16, 0x01	; 1
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	80 17       	cp	r24, r16
 4f0:	91 07       	cpc	r25, r17
 4f2:	21 f4       	brne	.+8      	; 0x4fc <__vector_50+0x9c>
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <__vector_50+0x9e>
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__vector_50+0x9e>
 4fc:	32 2f       	mov	r19, r18
 4fe:	33 23       	and	r19, r19
 500:	69 f0       	breq	.+26     	; 0x51c <__vector_50+0xbc>
		{
			PORTH ^= (1<<0);
 502:	e2 e0       	ldi	r30, 0x02	; 2
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	90 81       	ld	r25, Z
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	89 27       	eor	r24, r25
 50c:	80 83       	st	Z, r24
			OCR4A = 23980;
 50e:	8c ea       	ldi	r24, 0xAC	; 172
 510:	9d e5       	ldi	r25, 0x5D	; 93
 512:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 516:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 51a:	3a c0       	rjmp	.+116    	; 0x590 <__vector_50+0x130>
		}
		else if ((OCR4A < targetOCR) || ((PORTH & (1<<0)) != targetDirection))
 51c:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 520:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 524:	4c 17       	cp	r20, r28
 526:	5d 07       	cpc	r21, r29
 528:	50 f0       	brcs	.+20     	; 0x53e <__vector_50+0xde>
 52a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 52e:	40 fb       	bst	r20, 0
 530:	cc 24       	eor	r12, r12
 532:	c0 f8       	bld	r12, 0
 534:	d1 2c       	mov	r13, r1
 536:	8c 15       	cp	r24, r12
 538:	9d 05       	cpc	r25, r13
 53a:	09 f4       	brne	.+2      	; 0x53e <__vector_50+0xde>
 53c:	23 2f       	mov	r18, r19
 53e:	22 23       	and	r18, r18
 540:	99 f0       	breq	.+38     	; 0x568 <__vector_50+0x108>
		{
			OCR4A += 20;
 542:	e8 ea       	ldi	r30, 0xA8	; 168
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	44 96       	adiw	r24, 0x14	; 20
 54c:	91 83       	std	Z+1, r25	; 0x01
 54e:	80 83       	st	Z, r24
			if (OCR4A >= 24000)
 550:	80 81       	ld	r24, Z
 552:	91 81       	ldd	r25, Z+1	; 0x01
 554:	80 3c       	cpi	r24, 0xC0	; 192
 556:	9d 45       	sbci	r25, 0x5D	; 93
 558:	d8 f0       	brcs	.+54     	; 0x590 <__vector_50+0x130>
			{
				OCR4A = 32000;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	9d e7       	ldi	r25, 0x7D	; 125
 55e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 562:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 566:	14 c0       	rjmp	.+40     	; 0x590 <__vector_50+0x130>
			}
		} 
		else
		{
			if (OCR4A >= 24000)
 568:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 56c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 570:	80 3c       	cpi	r24, 0xC0	; 192
 572:	9d 45       	sbci	r25, 0x5D	; 93
 574:	30 f0       	brcs	.+12     	; 0x582 <__vector_50+0x122>
			{
				OCR4A = 23980;
 576:	8c ea       	ldi	r24, 0xAC	; 172
 578:	9d e5       	ldi	r25, 0x5D	; 93
 57a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 57e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
			}
			OCR4A -= 20;
 582:	e8 ea       	ldi	r30, 0xA8	; 168
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	44 97       	sbiw	r24, 0x14	; 20
 58c:	91 83       	std	Z+1, r25	; 0x01
 58e:	80 83       	st	Z, r24
		}
	}
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	0f 90       	pop	r0
 5ba:	0b be       	out	0x3b, r0	; 59
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <_GLOBAL__sub_I_M>:
}

char Motor::getTargetDirection() const
{
	return targetDirection_;
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	7f ef       	ldi	r23, 0xFF	; 255
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	26 cf       	rjmp	.-436    	; 0x41c <_Z41__static_initialization_and_destruction_0ii>
 5d0:	08 95       	ret

000005d2 <_GLOBAL__sub_D_M>:
 5d2:	6f ef       	ldi	r22, 0xFF	; 255
 5d4:	7f ef       	ldi	r23, 0xFF	; 255
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	20 cf       	rjmp	.-448    	; 0x41c <_Z41__static_initialization_and_destruction_0ii>
 5dc:	08 95       	ret

000005de <_ZN8PositionC1Ev>:
	EICRA |= 0b00001111;
	EIMSK |= 0b00000011;
} //Position

// default destructor
Position::~Position()
 5de:	e9 e6       	ldi	r30, 0x69	; 105
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	8f 60       	ori	r24, 0x0F	; 15
 5e6:	80 83       	st	Z, r24
 5e8:	8d b3       	in	r24, 0x1d	; 29
 5ea:	83 60       	ori	r24, 0x03	; 3
 5ec:	8d bb       	out	0x1d, r24	; 29
 5ee:	08 95       	ret

000005f0 <_Z41__static_initialization_and_destruction_0ii>:
}

int Position::getLastTime() const
{
	return lastTime_;
}
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	31 f4       	brne	.+12     	; 0x600 <_Z41__static_initialization_and_destruction_0ii+0x10>
 5f4:	6f 3f       	cpi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	19 f4       	brne	.+6      	; 0x600 <_Z41__static_initialization_and_destruction_0ii+0x10>
#include "Headers/Timer.h"
extern Timer T;

#include "Headers/Position.h"

Position P;
 5fa:	85 e0       	ldi	r24, 0x05	; 5
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	ef cf       	rjmp	.-34     	; 0x5de <_ZN8PositionC1Ev>
 600:	08 95       	ret

00000602 <_ZN8Position11setPositionEi>:
{
} //~Position

void Position::setPosition(int position)
{
	position_ = position;
 602:	fc 01       	movw	r30, r24
 604:	71 83       	std	Z+1, r23	; 0x01
 606:	60 83       	st	Z, r22
 608:	08 95       	ret

0000060a <_ZNK8Position11getPositionEv>:
}

int Position::getPosition() const
{
	return position_;
}
 60a:	fc 01       	movw	r30, r24
 60c:	80 81       	ld	r24, Z
 60e:	91 81       	ldd	r25, Z+1	; 0x01
 610:	08 95       	ret

00000612 <_ZN8Position11setLastTimeEi>:

void Position::setLastTime(int time)
{
	lastTime_ = time;
 612:	fc 01       	movw	r30, r24
 614:	73 83       	std	Z+3, r23	; 0x03
 616:	62 83       	std	Z+2, r22	; 0x02
 618:	08 95       	ret

0000061a <_ZNK8Position11getLastTimeEv>:
}

int Position::getLastTime() const
{
	return lastTime_;
}
 61a:	fc 01       	movw	r30, r24
 61c:	82 81       	ldd	r24, Z+2	; 0x02
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	08 95       	ret

00000622 <__vector_1>:
#include "Headers/Position.h"

Position P;

ISR(INT0_vect)
{
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	0b b6       	in	r0, 0x3b	; 59
 62e:	0f 92       	push	r0
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	if (T.getTime() >= (P.getLastTime()+5))
 64c:	89 e0       	ldi	r24, 0x09	; 9
 64e:	92 e0       	ldi	r25, 0x02	; 2
 650:	9f d0       	rcall	.+318    	; 0x790 <_ZNK5Timer7getTimeEv>
 652:	ec 01       	movw	r28, r24
 654:	85 e0       	ldi	r24, 0x05	; 5
 656:	92 e0       	ldi	r25, 0x02	; 2
 658:	e0 df       	rcall	.-64     	; 0x61a <_ZNK8Position11getLastTimeEv>
 65a:	05 96       	adiw	r24, 0x05	; 5
 65c:	c8 17       	cp	r28, r24
 65e:	d9 07       	cpc	r29, r25
 660:	84 f0       	brlt	.+32     	; 0x682 <__vector_1+0x60>
	{
		P.setPosition(P.getPosition()+1);
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	92 e0       	ldi	r25, 0x02	; 2
 666:	d1 df       	rcall	.-94     	; 0x60a <_ZNK8Position11getPositionEv>
 668:	bc 01       	movw	r22, r24
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	85 e0       	ldi	r24, 0x05	; 5
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	c7 df       	rcall	.-114    	; 0x602 <_ZN8Position11setPositionEi>
		P.setLastTime(T.getTime());
 674:	89 e0       	ldi	r24, 0x09	; 9
 676:	92 e0       	ldi	r25, 0x02	; 2
 678:	8b d0       	rcall	.+278    	; 0x790 <_ZNK5Timer7getTimeEv>
 67a:	bc 01       	movw	r22, r24
 67c:	85 e0       	ldi	r24, 0x05	; 5
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	c8 df       	rcall	.-112    	; 0x612 <_ZN8Position11setLastTimeEi>
 682:	ff 91       	pop	r31
	}
}
 684:	ef 91       	pop	r30
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	bf 91       	pop	r27
 68c:	af 91       	pop	r26
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	7f 91       	pop	r23
 694:	6f 91       	pop	r22
 696:	5f 91       	pop	r21
 698:	4f 91       	pop	r20
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0b be       	out	0x3b, r0	; 59
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <__vector_2>:
 6ac:	1f 92       	push	r1

ISR(INT1_vect)
{
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	0b b6       	in	r0, 0x3b	; 59
 6b8:	0f 92       	push	r0
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	if (T.getTime() >= (P.getLastTime()+5))
 6d6:	89 e0       	ldi	r24, 0x09	; 9
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	5a d0       	rcall	.+180    	; 0x790 <_ZNK5Timer7getTimeEv>
 6dc:	ec 01       	movw	r28, r24
 6de:	85 e0       	ldi	r24, 0x05	; 5
 6e0:	92 e0       	ldi	r25, 0x02	; 2
 6e2:	9b df       	rcall	.-202    	; 0x61a <_ZNK8Position11getLastTimeEv>
 6e4:	05 96       	adiw	r24, 0x05	; 5
 6e6:	c8 17       	cp	r28, r24
 6e8:	d9 07       	cpc	r29, r25
 6ea:	84 f0       	brlt	.+32     	; 0x70c <__vector_2+0x60>
	{
		P.setPosition(P.getPosition()+1);
 6ec:	85 e0       	ldi	r24, 0x05	; 5
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	8c df       	rcall	.-232    	; 0x60a <_ZNK8Position11getPositionEv>
 6f2:	bc 01       	movw	r22, r24
 6f4:	6f 5f       	subi	r22, 0xFF	; 255
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	85 e0       	ldi	r24, 0x05	; 5
 6fa:	92 e0       	ldi	r25, 0x02	; 2
 6fc:	82 df       	rcall	.-252    	; 0x602 <_ZN8Position11setPositionEi>
		P.setLastTime(T.getTime());
 6fe:	89 e0       	ldi	r24, 0x09	; 9
 700:	92 e0       	ldi	r25, 0x02	; 2
 702:	46 d0       	rcall	.+140    	; 0x790 <_ZNK5Timer7getTimeEv>
 704:	bc 01       	movw	r22, r24
 706:	85 e0       	ldi	r24, 0x05	; 5
 708:	92 e0       	ldi	r25, 0x02	; 2
 70a:	83 df       	rcall	.-250    	; 0x612 <_ZN8Position11setLastTimeEi>
 70c:	ff 91       	pop	r31
	}
}
 70e:	ef 91       	pop	r30
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	bf 91       	pop	r27
 716:	af 91       	pop	r26
 718:	9f 91       	pop	r25
 71a:	8f 91       	pop	r24
 71c:	7f 91       	pop	r23
 71e:	6f 91       	pop	r22
 720:	5f 91       	pop	r21
 722:	4f 91       	pop	r20
 724:	3f 91       	pop	r19
 726:	2f 91       	pop	r18
 728:	0f 90       	pop	r0
 72a:	0b be       	out	0x3b, r0	; 59
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <_GLOBAL__sub_I_P>:
 736:	6f ef       	ldi	r22, 0xFF	; 255
}

int Position::getLastTime() const
{
	return lastTime_;
}
 738:	7f ef       	ldi	r23, 0xFF	; 255
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	58 cf       	rjmp	.-336    	; 0x5f0 <_Z41__static_initialization_and_destruction_0ii>
 740:	08 95       	ret

00000742 <_GLOBAL__sub_D_P>:
 742:	6f ef       	ldi	r22, 0xFF	; 255
 744:	7f ef       	ldi	r23, 0xFF	; 255
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	52 cf       	rjmp	.-348    	; 0x5f0 <_Z41__static_initialization_and_destruction_0ii>
 74c:	08 95       	ret

0000074e <_ZN5TimerC1Ev>:
	
	time10ms_ = 0;
} //Timer

// default destructor
Timer::~Timer()
 74e:	fc 01       	movw	r30, r24
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	84 b9       	out	0x04, r24	; 4
 754:	15 b8       	out	0x05, r1	; 5
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 75c:	83 e1       	ldi	r24, 0x13	; 19
 75e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
 762:	23 ed       	ldi	r18, 0xD3	; 211
 764:	30 e3       	ldi	r19, 0x30	; 48
 766:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 76a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 76e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
 772:	78 94       	sei
 774:	10 82       	st	Z, r1
 776:	08 95       	ret

00000778 <_Z41__static_initialization_and_destruction_0ii>:
}

int Timer::getTime() const
{
	return time10ms_;
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	31 f4       	brne	.+12     	; 0x788 <_Z41__static_initialization_and_destruction_0ii+0x10>
 77c:	6f 3f       	cpi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	19 f4       	brne	.+6      	; 0x788 <_Z41__static_initialization_and_destruction_0ii+0x10>
*/


#include "Headers/Timer.h"

Timer T;
 782:	89 e0       	ldi	r24, 0x09	; 9
 784:	92 e0       	ldi	r25, 0x02	; 2
 786:	e3 cf       	rjmp	.-58     	; 0x74e <_ZN5TimerC1Ev>
 788:	08 95       	ret

0000078a <_ZN5Timer7setTimeEh>:
{
} //~Timer

void Timer::setTime(unsigned char time)
{
	time10ms_ = time;
 78a:	fc 01       	movw	r30, r24
 78c:	60 83       	st	Z, r22
 78e:	08 95       	ret

00000790 <_ZNK5Timer7getTimeEv>:
}

int Timer::getTime() const
{
	return time10ms_;
 790:	fc 01       	movw	r30, r24
 792:	80 81       	ld	r24, Z
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	08 95       	ret

00000798 <__vector_35>:
#include "Headers/Timer.h"

Timer T;

ISR(TIMER3_OVF_vect)
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	0b b6       	in	r0, 0x3b	; 59
 7a4:	0f 92       	push	r0
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
	T.setTime(T.getTime()+1);
 7be:	89 e0       	ldi	r24, 0x09	; 9
 7c0:	92 e0       	ldi	r25, 0x02	; 2
 7c2:	e6 df       	rcall	.-52     	; 0x790 <_ZNK5Timer7getTimeEv>
 7c4:	61 e0       	ldi	r22, 0x01	; 1
 7c6:	68 0f       	add	r22, r24
 7c8:	89 e0       	ldi	r24, 0x09	; 9
 7ca:	92 e0       	ldi	r25, 0x02	; 2
 7cc:	de df       	rcall	.-68     	; 0x78a <_ZN5Timer7setTimeEh>
	PORTB = T.getTime();
 7ce:	89 e0       	ldi	r24, 0x09	; 9
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	de df       	rcall	.-68     	; 0x790 <_ZNK5Timer7getTimeEv>
 7d4:	85 b9       	out	0x05, r24	; 5
}
 7d6:	ff 91       	pop	r31
 7d8:	ef 91       	pop	r30
 7da:	bf 91       	pop	r27
 7dc:	af 91       	pop	r26
 7de:	9f 91       	pop	r25
 7e0:	8f 91       	pop	r24
 7e2:	7f 91       	pop	r23
 7e4:	6f 91       	pop	r22
 7e6:	5f 91       	pop	r21
 7e8:	4f 91       	pop	r20
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0b be       	out	0x3b, r0	; 59
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <_GLOBAL__sub_I_T>:
}

int Timer::getTime() const
{
	return time10ms_;
 7fc:	6f ef       	ldi	r22, 0xFF	; 255
 7fe:	7f ef       	ldi	r23, 0xFF	; 255
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	b9 cf       	rjmp	.-142    	; 0x778 <_Z41__static_initialization_and_destruction_0ii>
 806:	08 95       	ret

00000808 <_GLOBAL__sub_D_T>:
 808:	6f ef       	ldi	r22, 0xFF	; 255
 80a:	7f ef       	ldi	r23, 0xFF	; 255
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	b3 cf       	rjmp	.-154    	; 0x778 <_Z41__static_initialization_and_destruction_0ii>
 812:	08 95       	ret

00000814 <__tablejump2__>:
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	88 1f       	adc	r24, r24
 81a:	8b bf       	out	0x3b, r24	; 59
 81c:	07 90       	elpm	r0, Z+
 81e:	f6 91       	elpm	r31, Z
 820:	e0 2d       	mov	r30, r0
 822:	19 94       	eijmp

00000824 <__do_global_dtors>:
 824:	10 e0       	ldi	r17, 0x00	; 0
 826:	c5 e7       	ldi	r28, 0x75	; 117
 828:	d0 e0       	ldi	r29, 0x00	; 0
 82a:	00 e0       	ldi	r16, 0x00	; 0
 82c:	05 c0       	rjmp	.+10     	; 0x838 <__do_global_dtors+0x14>
 82e:	80 2f       	mov	r24, r16
 830:	fe 01       	movw	r30, r28
 832:	f0 df       	rcall	.-32     	; 0x814 <__tablejump2__>
 834:	21 96       	adiw	r28, 0x01	; 1
 836:	01 1d       	adc	r16, r1
 838:	c8 37       	cpi	r28, 0x78	; 120
 83a:	d1 07       	cpc	r29, r17
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 07       	cpc	r16, r24
 840:	b1 f7       	brne	.-20     	; 0x82e <__do_global_dtors+0xa>
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
